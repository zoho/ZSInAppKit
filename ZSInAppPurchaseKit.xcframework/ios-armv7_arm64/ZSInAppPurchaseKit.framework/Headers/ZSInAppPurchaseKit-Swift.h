#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.1.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ZSInAppPurchaseKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

enum ZSDomain : NSInteger;

/// Configuration of the SDK. This configuration contains the basic data used to make API calls to Zoho Subscriptions’ server.
SWIFT_CLASS("_TtC18ZSInAppPurchaseKit15ZSConfiguration")
@interface ZSConfiguration : NSObject
/// The unique key generated for the organization from Zoho Subscriptions. It is used for communication between the SDK and the Zoho Subscriptions Server. To generate public key go to this url -> https://subscriptions.zoho.com
@property (nonatomic, copy) NSString * _Nonnull apiKey;
/// The unique id of the Product created in Zoho Subscriptions.
@property (nonatomic, copy) NSString * _Nonnull zsProductId;
/// This is the domain that your organization is created in. For Example: If your org located in zoho.com choose ZSDomain.usDC
@property (nonatomic) enum ZSDomain domain;
/// The Unique ID that is specific to an individual user. The id will be used to reference user in Zoho Subscription.
@property (nonatomic, copy) NSString * _Nonnull userId;
/// The email id of the user. For new users, the email will be used in creating an customer in Zoho Subscription.
@property (nonatomic, copy) NSString * _Nonnull emailId;
/// The display name of the user. For new users, the display name will be used in creating an customer in Zoho Subscription.
@property (nonatomic, copy) NSString * _Nonnull displayName;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Call this method to initialize ZSConfiguration with the required values.
/// \param apiKey The unique key generated for the organization from Zoho Subscriptions. It is used for communication between the SDK and the Zoho Subscriptions Server.
///
/// \param zsProductId The unique id of the Product created in Zoho Subscriptions.
///
/// \param domain This is the domain that your organization is created in. For Example: If your org located in zoho.com chosse ZSDomain.usDC
///
- (nonnull instancetype)initWithApiKey:(NSString * _Nonnull)apiKey zsProductId:(NSString * _Nonnull)zsProductId domain:(enum ZSDomain)domain OBJC_DESIGNATED_INITIALIZER;
/// Call this method to set user details.
/// \param userId The Unique ID that is specific to an individual user. The id will be used to reference user in Zoho Subscription.
///
/// \param email The email id of the user. For new users, the email will be used in creating an customer in Zoho Subscription.
///
/// \param displayName The display name of the user. For new users, the display name will be used in creating an customer in Zoho Subscription.
///
- (void)setUserInfoWithUserId:(NSString * _Nonnull)userId email:(NSString * _Nonnull)email displayName:(NSString * _Nonnull)displayName;
@end

enum DataType : NSInteger;

SWIFT_CLASS("_TtC18ZSInAppPurchaseKit13ZSCustomField")
@interface ZSCustomField : NSObject
/// The name of the custom field.
@property (nonatomic, copy) NSString * _Nonnull label;
@property (nonatomic, copy) NSString * _Nonnull value;
@property (nonatomic) double decimalValue;
@property (nonatomic) BOOL isChecked;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable multiSelectValue;
@property (nonatomic, copy) NSString * _Nonnull apiFieldName;
@property (nonatomic, copy) NSString * _Nonnull valueFormatted;
@property (nonatomic) enum DataType dataType;
/// A unique id for the custom field.
@property (nonatomic, copy) NSString * _Nonnull customFieldId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithApiFieldName:(NSString * _Nonnull)apiFieldName value:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, DataType, open) {
  DataTypeString = 0,
  DataTypeEmail = 1,
  DataTypeUrl = 2,
  DataTypePhone = 3,
  DataTypeNumber = 4,
  DataTypeDecimal = 5,
  DataTypeAmount = 6,
  DataTypePercent = 7,
  DataTypeDate = 8,
  DataTypeCheckBox = 9,
  DataTypeAutoNumber = 10,
  DataTypeDropDown = 11,
  DataTypeAttachment = 12,
  DataTypeMultiSelect = 13,
  DataTypeMultiline = 14,
  DataTypeLookup = 15,
};

/// This is the domain that your organization is created in. For Example: If your org located in zoho.in choose ZSDomain.inDC
typedef SWIFT_ENUM(NSInteger, ZSDomain, open) {
/// Chosse if your Organization created in zoho.com
  ZSDomainUsDC = 0,
/// Chosse if your Organization created in zoho.in
  ZSDomainInDC = 1,
/// Chosse if your Organization created in zoho.eu
  ZSDomainEuDC = 2,
/// Chosse if your Organization created in zoho.com.au
  ZSDomainAuDC = 3,
};

enum ZSErrorCode : NSInteger;

/// Error sent from the SDK.
SWIFT_CLASS("_TtC18ZSInAppPurchaseKit7ZSError")
@interface ZSError : NSObject
/// Corresponding error code from ZSErrorCode for the error.
@property (nonatomic) enum ZSErrorCode code;
/// The integer representation of the code.
@property (nonatomic) NSInteger errorCode;
/// The detailed description of the error. This message will be present only in English and will not be localized.
@property (nonatomic, copy) NSString * _Nonnull errorDescription;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The error codes will be return from the ZS InApp SDK
typedef SWIFT_ENUM(NSInteger, ZSErrorCode, open) {
/// Error code indicating that an unknown or unexpected error occurred in the SDK.
  ZSErrorCodeUnknown = -1,
/// Error code indicating that an unknown or unexpected error occurred.
  ZSErrorCodeAppStoreUnknown = 0,
/// Error code indicating that the client is not allowed to perform the attempted action.
  ZSErrorCodeAppStoreClientInvalid = 1,
/// Error code indicating that the user canceled a payment request.
  ZSErrorCodeAppStorePaymentCancelled = 2,
/// Error code indicating that one of the payment parameters was not recognized by the App Store.
  ZSErrorCodeAppStorePaymentInvalid = 3,
/// Error code indicating that the user is not allowed to authorize payments.
  ZSErrorCodeAppStorePaymentNotAllowed = 4,
/// Error code indicating that the requested product is not available in the store.
  ZSErrorCodeAppStoreProductNotAvailable = 5,
/// Error code indicating that the user has not allowed access to Cloud service information.
  ZSErrorCodeAppStoreCloudServicePermissionDenied = 6,
/// Error code indicating that the device could not connect to the network.
  ZSErrorCodeAppStoreCloudServiceNetworkConnectionFailed = 7,
/// Error code indicating that the user has revoked permission to use this cloud service.
  ZSErrorCodeAppStoreCloudServiceRevoked = 8,
/// Error code indicating that the user has not yet acknowledged Apple’s privacy policy for Apple Music.
  ZSErrorCodeAppStorePrivacyAcknowledgementRequired = 9,
/// Error code indicating that the app is attempting to use a property for which it does not have the required entitlement.
  ZSErrorCodeAppStoreUnauthorizedRequestData = 10,
/// Error code indicating that the offer identifier is invalid.
  ZSErrorCodeAppStoreInvalidOfferIdentifier = 11,
/// Error code indicating that the price you specified in App Store Connect is no longer valid.
  ZSErrorCodeAppStoreInvalidOfferPrice = 12,
/// Error code indicating that the signature in a payment discount is not valid.
  ZSErrorCodeAppStoreInvalidSignature = 13,
/// Error code indicating that parameters are missing in a payment discount.
  ZSErrorCodeAppStoreMissingOfferParams = 14,
/// Error code indicating that there is some unknown error occurred in Zoho Subscriptions server.
  ZSErrorCodeZsServerUnknown = 15,
/// Error code indicating that there are no valid purchases found in the receipt.
  ZSErrorCodeNoValidPurchasesFound = 2142,
/// Error code indicating that the purchase is already processed and synced to the Zoho Subscriptions server.
  ZSErrorCodePurchaseAlreadyProcessed = 2145,
/// Error code indicating that the api key provided for Zoho Subscriptions is invalid or revoked.
  ZSErrorCodeInvalidAPIKey = 2146,
/// Error code indicating that there is a connection problem while connecting to App Store Server from Zoho Subscriptions Server.
  ZSErrorCodeStoreConnectivityError = 101,
/// Error code indicating that the plan in Zoho Subscriptions is inactive.
  ZSErrorCodePlanInactiveInZS = 101019,
/// Error code indicating that the in app purchase receipt is not available.
  ZSErrorCodeReceiptNotAvailable = 101020,
/// Error code indicating that some of the configurations were not given in the <code>ZSKit</code> initializer. All other <code>ZSKit</code> methods have to be called only after initializing the SDK with an appropriate configuration.
  ZSErrorCodeConfigurationMissing = 101021,
};


SWIFT_CLASS("_TtC18ZSInAppPurchaseKit16ZSFileAttachment")
@interface ZSFileAttachment : NSObject
@property (nonatomic, copy) NSData * _Nonnull data;
@property (nonatomic, copy) NSString * _Nonnull mimeType;
@property (nonatomic, copy) NSString * _Nonnull fileName;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class ZSPlan;
@class SKProduct;
@class ZSSubscriptionDetail;
@protocol ZSKitDelegate;

/// The SDK will facilitate purchase with the app store. Any new purchase or changes to existing subscription will be automatically synced to your Zoho Subscriptions organisation and will reflect in your metrics.
SWIFT_CLASS("_TtC18ZSInAppPurchaseKit5ZSKit")
@interface ZSKit : NSObject
/// Call this method to initialize ZSInAppPurchaseKit. This is a one time initialization and has to be done before accessing other methods from the SDK.
/// \param configuration This configuration class contains the basic data used to make API calls to Zoho Subscriptions’ server.
///
+ (void)initializeWithConfiguration:(ZSConfiguration * _Nonnull)configuration;
/// This method is used to get the array of plans that are applicable to the user. The resulting array will contain the plans that are active in both the app store and Zoho Subscriptions. if you wish to block purchase of a particulate plan, you can mark it as inactive in Zoho Subscriptions Dashboard.
/// \param completion Returns array of applicable plans. It will returns an empty array if there are no active plans in Zoho Subscription or the App Store. If the call to subscription server or app store fails, it returns an error in the completion block.
///
+ (void)getPlansWithCompletion:(void (^ _Nonnull)(NSArray<ZSPlan *> * _Nonnull, ZSError * _Nullable))completion;
/// This method initiates the purchasing process for the product passed as parameter. After user confirms the purchase, the in app purchase receipt gets validated in Zoho Subscription’s server.
/// Then a new subscription is created in Zoho Subscriptions if the user does not have any existing subscription running.
/// In case the user already has an existing subscription, the current subscription will be upgraded or downgraded based on the current subscription.
/// \param product The SKProduct of the plan selected by the user. It is provided in the <code>ZSPlan</code> object that you have got from the getPlans method.
///
/// \param completion It will return the Subscription Info of the newly created/updated subscription. If the call to subscription server or app store fails, it returns an error in the completion block.”
///
+ (void)initiatePurchaseWithProduct:(SKProduct * _Nonnull)product customFields:(NSArray<ZSCustomField *> * _Nonnull)customFields completion:(void (^ _Nonnull)(ZSSubscriptionDetail * _Nullable, ZSError * _Nullable))completion;
/// If a subscription is active in App Store and yet to be synced in Zoho Subscription, this method can be called. This method can be called while the user clicks on the ‘Restore’ button from the subscription screen.
/// \param completion It will return the Subscription Info of the newly synced subscription. If the call to subscription server or app store fails, it returns an error in the completion block.
///
+ (void)restorePurchaseWithCustomFields:(NSArray<ZSCustomField *> * _Nonnull)customFields completion:(void (^ _Nonnull)(ZSSubscriptionDetail * _Nullable, ZSError * _Nullable))completion;
/// Sets the delegate for <code>ZSKit</code>. Setting this delegate will enable the app to receive info about promocode applied in App Store. Once the promo code applied info is received, the SDK will intimate the app via a this delegate.
/// \param delegate The Delegate will be responsible for handling promotional product purchases and changes in subscription details.
///
+ (void)setDelegateWithDelegate:(id <ZSKitDelegate> _Nonnull)delegate;
+ (void)isUserEligibleForIntroductoryOfferWithCompletion:(void (^ _Nonnull)(BOOL, ZSError * _Nullable))completion;
+ (void)isStorePurchaseAssociatedWithCurrentUserWithCompletion:(void (^ _Nonnull)(BOOL, NSString * _Nullable, ZSError * _Nullable))completion;
+ (ZSFileAttachment * _Nullable)getPurchaseMetadataFromStore SWIFT_WARN_UNUSED_RESULT;
+ (void)clearUserInfo;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class SKPayment;

/// This delegate is used to update the app if users are initated any promo purchase from the app store.
/// The delegate methods can be called anytime after the delegate is set in to sdk. Make sure your app is capable of anytime when the delegate methods are called.
SWIFT_PROTOCOL("_TtP18ZSInAppPurchaseKit13ZSKitDelegate_")
@protocol ZSKitDelegate
/// Tells the delegate that a user initiated an in-app purchase from the App Store.
/// Call the completion block to process the purchase. If the app is not in the state to make a purchase then store the completion at your end and call it when your app is ready. If you want to cancel the transaction, just ignore the delegate.
/// This delegate method is called when the user starts an in-app purchase in the App Store, and the transaction continues in your app. Specifically, if your app is already installed, the method is called automatically.
/// If your app is not yet installed when the user starts the in-app purchase in the App Store, the user gets a notification when the app installation is complete. This method is called when the user taps the notification. Otherwise, if the user opens the app manually, this method is called only if the app is opened soon after the purchase was started.
/// \param product The in-app purchase product. The corresponding <code>SKProduct</code> for promo code applied on the app store
///
/// \param payment The payment request.
///
/// \param completion Call this completion block to initiate purchase for the promocode applied. If you don’t want to process the promocode applied, you can simply refrain from calling the completion block.
///
- (void)shouldPurchasePromoProductWithProduct:(SKProduct * _Nonnull)product payment:(SKPayment * _Nonnull)payment initiatePurchase:(void (^ _Nonnull)(void))initiatePurchase;
/// This method will be called whenever the subscription status has been updated for the user. Any changes in subscription will be intimated to the app via this method.
/// \param subscriptions The updated <code>ZSSubscriptionDetail</code> Object.
///
- (void)didSubscriptionDetailsUpdatedWithSubscriptionDetail:(ZSSubscriptionDetail * _Nonnull)subscriptionDetail;
@end

enum ZSPlanInterval : NSInteger;

/// Plan object that contains the plan related information entered in Zoho Subscription along with the SKProduct info from App Store.
SWIFT_CLASS("_TtC18ZSInAppPurchaseKit6ZSPlan")
@interface ZSPlan : NSObject
/// SKProduct for the plan from App Store.
@property (nonatomic, strong) SKProduct * _Nullable skProduct;
/// Plan name entered in Zoho Subscriptions.
@property (nonatomic, copy) NSString * _Nonnull name;
/// Plan description entered in Zoho Subscriptions.
@property (nonatomic, copy) NSString * _Nonnull planDescription;
/// Plan code entered in Zoho Subscriptions.
@property (nonatomic, copy) NSString * _Nonnull planCode;
/// This Boolean indicates if this is the current plan that the user has subscribed to.
@property (nonatomic) BOOL isSubscriptionActive;
/// The interval in which the subscription has to be renewed. For example - 3 Months (3 is the interval here), 2 Weeks (2 is the interval here)
@property (nonatomic) NSInteger interval;
/// It is the period (Monthly, Weekly, Yearly) in which the interval is applied. For example, if the plan renews every 3 months, the month is the unit here. If the plan renews 2 weeks, the week is the unit here.
@property (nonatomic) enum ZSPlanInterval intervalUnit;
/// Custom fields configured in Zoho Subscriptions for the <code>ZSPlan</code>.
@property (nonatomic, copy) NSArray<ZSCustomField *> * _Nonnull customFields;
/// The price of the configured plan.
@property (nonatomic) double price;
/// The price of the configured plan along with currency.
@property (nonatomic, copy) NSString * _Nonnull priceFormatted;
/// Number of billing cycles configured for the plan.
@property (nonatomic) NSInteger billingCycles;
/// This indicates the status of the plan that plan is active or inactive.
@property (nonatomic, readonly) BOOL isActive;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// It is the period (Monthly, Weekly, Yearly) in which the interval is applied. For example, if the plan renews every 3 months, the month is the unit here. If the plan renews 2 weeks, the week is the unit here.
typedef SWIFT_ENUM(NSInteger, ZSPlanInterval, open) {
  ZSPlanIntervalWeekly = 0,
  ZSPlanIntervalMonthly = 1,
  ZSPlanIntervalYearly = 2,
};

enum SubscriptionStatus : NSInteger;
enum SubscriptionSource : NSInteger;

/// ZSSubscriptonDetails will have the details of a particular subscription. It will have have the plan related details and the status of the subscription along with the expiry details.
SWIFT_CLASS("_TtC18ZSInAppPurchaseKit20ZSSubscriptionDetail")
@interface ZSSubscriptionDetail : NSObject
/// A unique identifier of a particular subscription.
@property (nonatomic, copy) NSString * _Nonnull subscriptionId;
/// The name of the subscription.
@property (nonatomic, copy) NSString * _Nonnull name;
/// A unique number for the subscription, auto generated based on predefined preferences while the subscription is created.
@property (nonatomic, copy) NSString * _Nonnull subscriptionNumber;
/// The current status of the subscription.
@property (nonatomic) enum SubscriptionStatus status;
/// Formatted value of the subscription’s <code>status</code>.
@property (nonatomic, copy) NSString * _Nonnull statusFormatted;
/// The renewal amount for the subscription.
@property (nonatomic) double amount;
/// The renewal amount for the subscription along with currency.
@property (nonatomic, copy) NSString * _Nullable amountFormatted;
/// The interval in which the subscription has to be renewed. For example - 3 Months (3 is the interval here), 2 Weeks (2 is the interval here)
@property (nonatomic) NSInteger interval;
/// Intervalconfigured for the plan for which the subscription is created. Example - Monthly, Yearly.
@property (nonatomic) enum ZSPlanInterval intervalUnit;
/// Referece id of the subscription.
@property (nonatomic, copy) NSString * _Nonnull referenceId;
/// Name of the product under which the subscription is present.
@property (nonatomic, copy) NSString * _Nonnull productName;
/// Name of the plan for which the subscription is created.
@property (nonatomic, copy) NSString * _Nonnull planName;
/// Code configured for the plan.
@property (nonatomic, copy) NSString * _Nonnull planCode;
/// Name of the plan for which the subscription is created.
@property (nonatomic, copy) NSString * _Nonnull planDescription;
/// The remaining days available in trial period for the subscription.
@property (nonatomic) NSInteger trialRemainingDays;
/// Next billing date of the subscription. Next renewal date.
@property (nonatomic, copy) NSDate * _Nullable nextBillingDate;
/// Formatted next billing date of the subscription. Next renewal date.
@property (nonatomic, copy) NSString * _Nullable nextBillingDateFormatted;
/// Cancelled date of the subscription. Cancellation date.
@property (nonatomic, copy) NSDate * _Nullable cancelledDate;
/// Formatted cancelled date of the subscription. Cancellation date.
@property (nonatomic, copy) NSString * _Nullable cancelledDateFormatted;
/// Current term ending date of the subscription.
@property (nonatomic, copy) NSDate * _Nullable currentTermEndsDate;
/// Formatted current term ending date of the subscription.
@property (nonatomic, copy) NSString * _Nullable currentTermEndsDateFormatted;
/// The start date of the trial period.
@property (nonatomic, copy) NSDate * _Nullable trialStartsDate;
/// Formatted the start date of the trial period.
@property (nonatomic, copy) NSString * _Nullable trialStartsDateFormatted;
/// The end date of the trial period.
@property (nonatomic, copy) NSDate * _Nullable trialEndsDate;
/// Formatted the end date of the trial period.
@property (nonatomic, copy) NSString * _Nullable trialEndsDateFormatted;
/// The next billing retry date of the subscription.
@property (nonatomic, copy) NSDate * _Nullable nextRetryDate;
/// Formatted value of the next retry date.
@property (nonatomic, copy) NSString * _Nullable nextRetryDateFormatted;
/// Custom fields configured in Zoho Subscriptions for the <code>ZSSubscriptionDetail</code>.
@property (nonatomic, copy) NSArray<ZSCustomField *> * _Nonnull customFields;
/// The source from where the subscription was created.
@property (nonatomic) enum SubscriptionSource source;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The current status of the subscription.
typedef SWIFT_ENUM(NSInteger, SubscriptionStatus, open) {
/// Subscriptions under the trial period.
  SubscriptionStatusTrial = 0,
/// Subscriptions whose trial period has expired.
  SubscriptionStatusTrialExpired = 1,
/// Subscriptions that are currently active and paid up-to-date.
  SubscriptionStatusLive = 2,
/// Subscriptions whose renewal has failed in the web app and are being retried. Status is applicable only for web purchases.
  SubscriptionStatusDunning = 3,
/// Subscriptions whose renewal has failed in the App/Play store and in grace period.
  SubscriptionStatusUnpaid = 4,
/// Subscriptions that are created but not yet live i.e. their activation date is ahead of the current date.
  SubscriptionStatusFuture = 5,
/// Subscriptions that have been canceled using the ‘Cancel On Next Renewal’ option in web or in stores. Subscriptions in non renewing state will not be renewed after the current billing cycle.
  SubscriptionStatusNonRenewing = 6,
/// Subscriptions that have been canceled. It could be due to manual cancellation or automatic cancellation.
  SubscriptionStatusCancelled = 7,
/// Subscription whose subscription period has expired.
  SubscriptionStatusExpired = 8,
/// Applicable only in App Store purchases.  Renewal has failed and the app store will retry the payment for 60 days. Untill then the subscription will be in this status.
  SubscriptionStatusInBillingRetry = 9,
/// This is to indicate that this status is not yet configured in this SDK. Please use the latest SDK.
  SubscriptionStatusUnknown = 10,
};

/// The source from where the subscription was created.
typedef SWIFT_ENUM(NSInteger, SubscriptionSource, open) {
  SubscriptionSourceAppStore = 0,
  SubscriptionSourcePlayStore = 1,
  SubscriptionSourceApp = 2,
  SubscriptionSourceUnknown = 3,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.1.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ZSInAppPurchaseKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

enum ZSDomain : NSInteger;

/// Configuration of the SDK. This configuration contains the basic data used to make API calls to Zoho Subscriptions’ server.
SWIFT_CLASS("_TtC18ZSInAppPurchaseKit15ZSConfiguration")
@interface ZSConfiguration : NSObject
/// The unique key generated for the organization from Zoho Subscriptions. It is used for communication between the SDK and the Zoho Subscriptions Server. To generate public key go to this url -> https://subscriptions.zoho.com
@property (nonatomic, copy) NSString * _Nonnull apiKey;
/// The unique id of the Product created in Zoho Subscriptions.
@property (nonatomic, copy) NSString * _Nonnull zsProductId;
/// This is the domain that your organization is created in. For Example: If your org located in zoho.com choose ZSDomain.usDC
@property (nonatomic) enum ZSDomain domain;
/// The Unique ID that is specific to an individual user. The id will be used to reference user in Zoho Subscription.
@property (nonatomic, copy) NSString * _Nonnull userId;
/// The email id of the user. For new users, the email will be used in creating an customer in Zoho Subscription.
@property (nonatomic, copy) NSString * _Nonnull emailId;
/// The display name of the user. For new users, the display name will be used in creating an customer in Zoho Subscription.
@property (nonatomic, copy) NSString * _Nonnull displayName;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Call this method to initialize ZSConfiguration with the required values.
/// \param apiKey The unique key generated for the organization from Zoho Subscriptions. It is used for communication between the SDK and the Zoho Subscriptions Server.
///
/// \param zsProductId The unique id of the Product created in Zoho Subscriptions.
///
/// \param domain This is the domain that your organization is created in. For Example: If your org located in zoho.com chosse ZSDomain.usDC
///
- (nonnull instancetype)initWithApiKey:(NSString * _Nonnull)apiKey zsProductId:(NSString * _Nonnull)zsProductId domain:(enum ZSDomain)domain OBJC_DESIGNATED_INITIALIZER;
/// Call this method to set user details.
/// \param userId The Unique ID that is specific to an individual user. The id will be used to reference user in Zoho Subscription.
///
/// \param email The email id of the user. For new users, the email will be used in creating an customer in Zoho Subscription.
///
/// \param displayName The display name of the user. For new users, the display name will be used in creating an customer in Zoho Subscription.
///
- (void)setUserInfoWithUserId:(NSString * _Nonnull)userId email:(NSString * _Nonnull)email displayName:(NSString * _Nonnull)displayName;
@end

enum DataType : NSInteger;

SWIFT_CLASS("_TtC18ZSInAppPurchaseKit13ZSCustomField")
@interface ZSCustomField : NSObject
/// The name of the custom field.
@property (nonatomic, copy) NSString * _Nonnull label;
@property (nonatomic, copy) NSString * _Nonnull value;
@property (nonatomic) double decimalValue;
@property (nonatomic) BOOL isChecked;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable multiSelectValue;
@property (nonatomic, copy) NSString * _Nonnull apiFieldName;
@property (nonatomic, copy) NSString * _Nonnull valueFormatted;
@property (nonatomic) enum DataType dataType;
/// A unique id for the custom field.
@property (nonatomic, copy) NSString * _Nonnull customFieldId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithApiFieldName:(NSString * _Nonnull)apiFieldName value:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, DataType, open) {
  DataTypeString = 0,
  DataTypeEmail = 1,
  DataTypeUrl = 2,
  DataTypePhone = 3,
  DataTypeNumber = 4,
  DataTypeDecimal = 5,
  DataTypeAmount = 6,
  DataTypePercent = 7,
  DataTypeDate = 8,
  DataTypeCheckBox = 9,
  DataTypeAutoNumber = 10,
  DataTypeDropDown = 11,
  DataTypeAttachment = 12,
  DataTypeMultiSelect = 13,
  DataTypeMultiline = 14,
  DataTypeLookup = 15,
};

/// This is the domain that your organization is created in. For Example: If your org located in zoho.in choose ZSDomain.inDC
typedef SWIFT_ENUM(NSInteger, ZSDomain, open) {
/// Chosse if your Organization created in zoho.com
  ZSDomainUsDC = 0,
/// Chosse if your Organization created in zoho.in
  ZSDomainInDC = 1,
/// Chosse if your Organization created in zoho.eu
  ZSDomainEuDC = 2,
/// Chosse if your Organization created in zoho.com.au
  ZSDomainAuDC = 3,
};

enum ZSErrorCode : NSInteger;

/// Error sent from the SDK.
SWIFT_CLASS("_TtC18ZSInAppPurchaseKit7ZSError")
@interface ZSError : NSObject
/// Corresponding error code from ZSErrorCode for the error.
@property (nonatomic) enum ZSErrorCode code;
/// The integer representation of the code.
@property (nonatomic) NSInteger errorCode;
/// The detailed description of the error. This message will be present only in English and will not be localized.
@property (nonatomic, copy) NSString * _Nonnull errorDescription;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The error codes will be return from the ZS InApp SDK
typedef SWIFT_ENUM(NSInteger, ZSErrorCode, open) {
/// Error code indicating that an unknown or unexpected error occurred in the SDK.
  ZSErrorCodeUnknown = -1,
/// Error code indicating that an unknown or unexpected error occurred.
  ZSErrorCodeAppStoreUnknown = 0,
/// Error code indicating that the client is not allowed to perform the attempted action.
  ZSErrorCodeAppStoreClientInvalid = 1,
/// Error code indicating that the user canceled a payment request.
  ZSErrorCodeAppStorePaymentCancelled = 2,
/// Error code indicating that one of the payment parameters was not recognized by the App Store.
  ZSErrorCodeAppStorePaymentInvalid = 3,
/// Error code indicating that the user is not allowed to authorize payments.
  ZSErrorCodeAppStorePaymentNotAllowed = 4,
/// Error code indicating that the requested product is not available in the store.
  ZSErrorCodeAppStoreProductNotAvailable = 5,
/// Error code indicating that the user has not allowed access to Cloud service information.
  ZSErrorCodeAppStoreCloudServicePermissionDenied = 6,
/// Error code indicating that the device could not connect to the network.
  ZSErrorCodeAppStoreCloudServiceNetworkConnectionFailed = 7,
/// Error code indicating that the user has revoked permission to use this cloud service.
  ZSErrorCodeAppStoreCloudServiceRevoked = 8,
/// Error code indicating that the user has not yet acknowledged Apple’s privacy policy for Apple Music.
  ZSErrorCodeAppStorePrivacyAcknowledgementRequired = 9,
/// Error code indicating that the app is attempting to use a property for which it does not have the required entitlement.
  ZSErrorCodeAppStoreUnauthorizedRequestData = 10,
/// Error code indicating that the offer identifier is invalid.
  ZSErrorCodeAppStoreInvalidOfferIdentifier = 11,
/// Error code indicating that the price you specified in App Store Connect is no longer valid.
  ZSErrorCodeAppStoreInvalidOfferPrice = 12,
/// Error code indicating that the signature in a payment discount is not valid.
  ZSErrorCodeAppStoreInvalidSignature = 13,
/// Error code indicating that parameters are missing in a payment discount.
  ZSErrorCodeAppStoreMissingOfferParams = 14,
/// Error code indicating that there is some unknown error occurred in Zoho Subscriptions server.
  ZSErrorCodeZsServerUnknown = 15,
/// Error code indicating that there are no valid purchases found in the receipt.
  ZSErrorCodeNoValidPurchasesFound = 2142,
/// Error code indicating that the purchase is already processed and synced to the Zoho Subscriptions server.
  ZSErrorCodePurchaseAlreadyProcessed = 2145,
/// Error code indicating that the api key provided for Zoho Subscriptions is invalid or revoked.
  ZSErrorCodeInvalidAPIKey = 2146,
/// Error code indicating that there is a connection problem while connecting to App Store Server from Zoho Subscriptions Server.
  ZSErrorCodeStoreConnectivityError = 101,
/// Error code indicating that the plan in Zoho Subscriptions is inactive.
  ZSErrorCodePlanInactiveInZS = 101019,
/// Error code indicating that the in app purchase receipt is not available.
  ZSErrorCodeReceiptNotAvailable = 101020,
/// Error code indicating that some of the configurations were not given in the <code>ZSKit</code> initializer. All other <code>ZSKit</code> methods have to be called only after initializing the SDK with an appropriate configuration.
  ZSErrorCodeConfigurationMissing = 101021,
};


SWIFT_CLASS("_TtC18ZSInAppPurchaseKit16ZSFileAttachment")
@interface ZSFileAttachment : NSObject
@property (nonatomic, copy) NSData * _Nonnull data;
@property (nonatomic, copy) NSString * _Nonnull mimeType;
@property (nonatomic, copy) NSString * _Nonnull fileName;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class ZSPlan;
@class SKProduct;
@class ZSSubscriptionDetail;
@protocol ZSKitDelegate;

/// The SDK will facilitate purchase with the app store. Any new purchase or changes to existing subscription will be automatically synced to your Zoho Subscriptions organisation and will reflect in your metrics.
SWIFT_CLASS("_TtC18ZSInAppPurchaseKit5ZSKit")
@interface ZSKit : NSObject
/// Call this method to initialize ZSInAppPurchaseKit. This is a one time initialization and has to be done before accessing other methods from the SDK.
/// \param configuration This configuration class contains the basic data used to make API calls to Zoho Subscriptions’ server.
///
+ (void)initializeWithConfiguration:(ZSConfiguration * _Nonnull)configuration;
/// This method is used to get the array of plans that are applicable to the user. The resulting array will contain the plans that are active in both the app store and Zoho Subscriptions. if you wish to block purchase of a particulate plan, you can mark it as inactive in Zoho Subscriptions Dashboard.
/// \param completion Returns array of applicable plans. It will returns an empty array if there are no active plans in Zoho Subscription or the App Store. If the call to subscription server or app store fails, it returns an error in the completion block.
///
+ (void)getPlansWithCompletion:(void (^ _Nonnull)(NSArray<ZSPlan *> * _Nonnull, ZSError * _Nullable))completion;
/// This method initiates the purchasing process for the product passed as parameter. After user confirms the purchase, the in app purchase receipt gets validated in Zoho Subscription’s server.
/// Then a new subscription is created in Zoho Subscriptions if the user does not have any existing subscription running.
/// In case the user already has an existing subscription, the current subscription will be upgraded or downgraded based on the current subscription.
/// \param product The SKProduct of the plan selected by the user. It is provided in the <code>ZSPlan</code> object that you have got from the getPlans method.
///
/// \param completion It will return the Subscription Info of the newly created/updated subscription. If the call to subscription server or app store fails, it returns an error in the completion block.”
///
+ (void)initiatePurchaseWithProduct:(SKProduct * _Nonnull)product customFields:(NSArray<ZSCustomField *> * _Nonnull)customFields completion:(void (^ _Nonnull)(ZSSubscriptionDetail * _Nullable, ZSError * _Nullable))completion;
/// If a subscription is active in App Store and yet to be synced in Zoho Subscription, this method can be called. This method can be called while the user clicks on the ‘Restore’ button from the subscription screen.
/// \param completion It will return the Subscription Info of the newly synced subscription. If the call to subscription server or app store fails, it returns an error in the completion block.
///
+ (void)restorePurchaseWithCustomFields:(NSArray<ZSCustomField *> * _Nonnull)customFields completion:(void (^ _Nonnull)(ZSSubscriptionDetail * _Nullable, ZSError * _Nullable))completion;
/// Sets the delegate for <code>ZSKit</code>. Setting this delegate will enable the app to receive info about promocode applied in App Store. Once the promo code applied info is received, the SDK will intimate the app via a this delegate.
/// \param delegate The Delegate will be responsible for handling promotional product purchases and changes in subscription details.
///
+ (void)setDelegateWithDelegate:(id <ZSKitDelegate> _Nonnull)delegate;
+ (void)isUserEligibleForIntroductoryOfferWithCompletion:(void (^ _Nonnull)(BOOL, ZSError * _Nullable))completion;
+ (void)isStorePurchaseAssociatedWithCurrentUserWithCompletion:(void (^ _Nonnull)(BOOL, NSString * _Nullable, ZSError * _Nullable))completion;
+ (ZSFileAttachment * _Nullable)getPurchaseMetadataFromStore SWIFT_WARN_UNUSED_RESULT;
+ (void)clearUserInfo;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class SKPayment;

/// This delegate is used to update the app if users are initated any promo purchase from the app store.
/// The delegate methods can be called anytime after the delegate is set in to sdk. Make sure your app is capable of anytime when the delegate methods are called.
SWIFT_PROTOCOL("_TtP18ZSInAppPurchaseKit13ZSKitDelegate_")
@protocol ZSKitDelegate
/// Tells the delegate that a user initiated an in-app purchase from the App Store.
/// Call the completion block to process the purchase. If the app is not in the state to make a purchase then store the completion at your end and call it when your app is ready. If you want to cancel the transaction, just ignore the delegate.
/// This delegate method is called when the user starts an in-app purchase in the App Store, and the transaction continues in your app. Specifically, if your app is already installed, the method is called automatically.
/// If your app is not yet installed when the user starts the in-app purchase in the App Store, the user gets a notification when the app installation is complete. This method is called when the user taps the notification. Otherwise, if the user opens the app manually, this method is called only if the app is opened soon after the purchase was started.
/// \param product The in-app purchase product. The corresponding <code>SKProduct</code> for promo code applied on the app store
///
/// \param payment The payment request.
///
/// \param completion Call this completion block to initiate purchase for the promocode applied. If you don’t want to process the promocode applied, you can simply refrain from calling the completion block.
///
- (void)shouldPurchasePromoProductWithProduct:(SKProduct * _Nonnull)product payment:(SKPayment * _Nonnull)payment initiatePurchase:(void (^ _Nonnull)(void))initiatePurchase;
/// This method will be called whenever the subscription status has been updated for the user. Any changes in subscription will be intimated to the app via this method.
/// \param subscriptions The updated <code>ZSSubscriptionDetail</code> Object.
///
- (void)didSubscriptionDetailsUpdatedWithSubscriptionDetail:(ZSSubscriptionDetail * _Nonnull)subscriptionDetail;
@end

enum ZSPlanInterval : NSInteger;

/// Plan object that contains the plan related information entered in Zoho Subscription along with the SKProduct info from App Store.
SWIFT_CLASS("_TtC18ZSInAppPurchaseKit6ZSPlan")
@interface ZSPlan : NSObject
/// SKProduct for the plan from App Store.
@property (nonatomic, strong) SKProduct * _Nullable skProduct;
/// Plan name entered in Zoho Subscriptions.
@property (nonatomic, copy) NSString * _Nonnull name;
/// Plan description entered in Zoho Subscriptions.
@property (nonatomic, copy) NSString * _Nonnull planDescription;
/// Plan code entered in Zoho Subscriptions.
@property (nonatomic, copy) NSString * _Nonnull planCode;
/// This Boolean indicates if this is the current plan that the user has subscribed to.
@property (nonatomic) BOOL isSubscriptionActive;
/// The interval in which the subscription has to be renewed. For example - 3 Months (3 is the interval here), 2 Weeks (2 is the interval here)
@property (nonatomic) NSInteger interval;
/// It is the period (Monthly, Weekly, Yearly) in which the interval is applied. For example, if the plan renews every 3 months, the month is the unit here. If the plan renews 2 weeks, the week is the unit here.
@property (nonatomic) enum ZSPlanInterval intervalUnit;
/// Custom fields configured in Zoho Subscriptions for the <code>ZSPlan</code>.
@property (nonatomic, copy) NSArray<ZSCustomField *> * _Nonnull customFields;
/// The price of the configured plan.
@property (nonatomic) double price;
/// The price of the configured plan along with currency.
@property (nonatomic, copy) NSString * _Nonnull priceFormatted;
/// Number of billing cycles configured for the plan.
@property (nonatomic) NSInteger billingCycles;
/// This indicates the status of the plan that plan is active or inactive.
@property (nonatomic, readonly) BOOL isActive;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// It is the period (Monthly, Weekly, Yearly) in which the interval is applied. For example, if the plan renews every 3 months, the month is the unit here. If the plan renews 2 weeks, the week is the unit here.
typedef SWIFT_ENUM(NSInteger, ZSPlanInterval, open) {
  ZSPlanIntervalWeekly = 0,
  ZSPlanIntervalMonthly = 1,
  ZSPlanIntervalYearly = 2,
};

enum SubscriptionStatus : NSInteger;
enum SubscriptionSource : NSInteger;

/// ZSSubscriptonDetails will have the details of a particular subscription. It will have have the plan related details and the status of the subscription along with the expiry details.
SWIFT_CLASS("_TtC18ZSInAppPurchaseKit20ZSSubscriptionDetail")
@interface ZSSubscriptionDetail : NSObject
/// A unique identifier of a particular subscription.
@property (nonatomic, copy) NSString * _Nonnull subscriptionId;
/// The name of the subscription.
@property (nonatomic, copy) NSString * _Nonnull name;
/// A unique number for the subscription, auto generated based on predefined preferences while the subscription is created.
@property (nonatomic, copy) NSString * _Nonnull subscriptionNumber;
/// The current status of the subscription.
@property (nonatomic) enum SubscriptionStatus status;
/// Formatted value of the subscription’s <code>status</code>.
@property (nonatomic, copy) NSString * _Nonnull statusFormatted;
/// The renewal amount for the subscription.
@property (nonatomic) double amount;
/// The renewal amount for the subscription along with currency.
@property (nonatomic, copy) NSString * _Nullable amountFormatted;
/// The interval in which the subscription has to be renewed. For example - 3 Months (3 is the interval here), 2 Weeks (2 is the interval here)
@property (nonatomic) NSInteger interval;
/// Intervalconfigured for the plan for which the subscription is created. Example - Monthly, Yearly.
@property (nonatomic) enum ZSPlanInterval intervalUnit;
/// Referece id of the subscription.
@property (nonatomic, copy) NSString * _Nonnull referenceId;
/// Name of the product under which the subscription is present.
@property (nonatomic, copy) NSString * _Nonnull productName;
/// Name of the plan for which the subscription is created.
@property (nonatomic, copy) NSString * _Nonnull planName;
/// Code configured for the plan.
@property (nonatomic, copy) NSString * _Nonnull planCode;
/// Name of the plan for which the subscription is created.
@property (nonatomic, copy) NSString * _Nonnull planDescription;
/// The remaining days available in trial period for the subscription.
@property (nonatomic) NSInteger trialRemainingDays;
/// Next billing date of the subscription. Next renewal date.
@property (nonatomic, copy) NSDate * _Nullable nextBillingDate;
/// Formatted next billing date of the subscription. Next renewal date.
@property (nonatomic, copy) NSString * _Nullable nextBillingDateFormatted;
/// Cancelled date of the subscription. Cancellation date.
@property (nonatomic, copy) NSDate * _Nullable cancelledDate;
/// Formatted cancelled date of the subscription. Cancellation date.
@property (nonatomic, copy) NSString * _Nullable cancelledDateFormatted;
/// Current term ending date of the subscription.
@property (nonatomic, copy) NSDate * _Nullable currentTermEndsDate;
/// Formatted current term ending date of the subscription.
@property (nonatomic, copy) NSString * _Nullable currentTermEndsDateFormatted;
/// The start date of the trial period.
@property (nonatomic, copy) NSDate * _Nullable trialStartsDate;
/// Formatted the start date of the trial period.
@property (nonatomic, copy) NSString * _Nullable trialStartsDateFormatted;
/// The end date of the trial period.
@property (nonatomic, copy) NSDate * _Nullable trialEndsDate;
/// Formatted the end date of the trial period.
@property (nonatomic, copy) NSString * _Nullable trialEndsDateFormatted;
/// The next billing retry date of the subscription.
@property (nonatomic, copy) NSDate * _Nullable nextRetryDate;
/// Formatted value of the next retry date.
@property (nonatomic, copy) NSString * _Nullable nextRetryDateFormatted;
/// Custom fields configured in Zoho Subscriptions for the <code>ZSSubscriptionDetail</code>.
@property (nonatomic, copy) NSArray<ZSCustomField *> * _Nonnull customFields;
/// The source from where the subscription was created.
@property (nonatomic) enum SubscriptionSource source;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The current status of the subscription.
typedef SWIFT_ENUM(NSInteger, SubscriptionStatus, open) {
/// Subscriptions under the trial period.
  SubscriptionStatusTrial = 0,
/// Subscriptions whose trial period has expired.
  SubscriptionStatusTrialExpired = 1,
/// Subscriptions that are currently active and paid up-to-date.
  SubscriptionStatusLive = 2,
/// Subscriptions whose renewal has failed in the web app and are being retried. Status is applicable only for web purchases.
  SubscriptionStatusDunning = 3,
/// Subscriptions whose renewal has failed in the App/Play store and in grace period.
  SubscriptionStatusUnpaid = 4,
/// Subscriptions that are created but not yet live i.e. their activation date is ahead of the current date.
  SubscriptionStatusFuture = 5,
/// Subscriptions that have been canceled using the ‘Cancel On Next Renewal’ option in web or in stores. Subscriptions in non renewing state will not be renewed after the current billing cycle.
  SubscriptionStatusNonRenewing = 6,
/// Subscriptions that have been canceled. It could be due to manual cancellation or automatic cancellation.
  SubscriptionStatusCancelled = 7,
/// Subscription whose subscription period has expired.
  SubscriptionStatusExpired = 8,
/// Applicable only in App Store purchases.  Renewal has failed and the app store will retry the payment for 60 days. Untill then the subscription will be in this status.
  SubscriptionStatusInBillingRetry = 9,
/// This is to indicate that this status is not yet configured in this SDK. Please use the latest SDK.
  SubscriptionStatusUnknown = 10,
};

/// The source from where the subscription was created.
typedef SWIFT_ENUM(NSInteger, SubscriptionSource, open) {
  SubscriptionSourceAppStore = 0,
  SubscriptionSourcePlayStore = 1,
  SubscriptionSourceApp = 2,
  SubscriptionSourceUnknown = 3,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
